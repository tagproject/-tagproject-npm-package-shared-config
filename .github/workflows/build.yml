name: Build

on: [push, pull_request]

jobs:
  matrix:
    name: Configure matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          CONFIG=$(echo $(cat .github/matrix.json) | sed 's/ //g' )
          echo "::set-output name=matrix::$CONFIG"
  build:
    name: Build
    needs: [ matrix ]
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node }}

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}

    - name: Install Dependencies
      run: npm ci

    - name: Build
      run: npm run build

  status:
    name: Success build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - id: status
        name: Load jobs
        run: |
          status=$(curl -X GET -s -u "admin:${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq "[.jobs[] | select(.status==\"completed\" and .conclusion==\"failure\") | { status: .conclusion, matrix: .name}]")
          echo "::set-output name=status::$status"
          echo $status
          echo "BUILD_STATUS=$status" >> $GITHUB_ENV
          
      - if: ${{ contains(steps.status.outputs.status, 'failure') }}'
        name: Fail job
        run: |
          exit 1

      - if: ${{ contains(steps.status.outputs.status, 'success') }}'
        name: Success job
        run: |
          exit 0
      


